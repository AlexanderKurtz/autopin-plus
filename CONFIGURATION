Configuring autopin+

This documents describes how to configure autopin+. Sections 1 and 2 are specific to the configuration format
implemented by the class StandardConfiguration, which is used by default.

1. Configuration format

    Configuration options for autopin+ are pairs of option names and value lists:

      opt = val1 val2 val3

    The above statement assigns the values val1, val2 and val3 to the configuration option opt. Additional
    values can be added using the operator +=. -= can be used to remove values from the list:

      opt = val1 val2 val3
      opt += val4 --> opt contains val1, val2, val3 and val4
      opt -= val1 --> opt contains val2, val3 and val4

    When using a configuration file, single lines can be disabled by adding #:

      #opt = val1 val2 val3

    Boolean values can be expressed using the keywords "true", "True", "TRUE" and "false", "False", "FALSE".


2. Configuration sources

    On startup, autopin+ accepts configuration options from three different sources:

    - Default configuration
      A default configuration file with standard options can be loaded by setting the environment variable
      AUTOPIN_DEFAULT_CONFIG to the path of the desired configuration file.

    - User configuration
      By starting autopin+ with the argument "-c <user_config>" where <user_config> is the path to a configuration
      file, one can provide more specific configuration options.

    - Command line
      Configuration options can also be specified directly on the command line. In this case the prefix "--" must be
      added to the corresponding option:

	autopin+ -c user_config --opta+=val4 --optb=val8

    The three configuration sources are loaded in the order shown above. This means that the user configuration
    can overwrite settings specified in the default configuration. Command line options can overwrite both the user
    configuration and the default configuration.


3. Configuraion options

    2.1 Basic configuration

      Option			Arguments	Descripton

      Exec			String		autopin+ will start the observed process with the command
						specified in the argument

      Attach			String/Int	autopin+ will attach to the process with the given name
						or the given pid

      Trace			Boolean		Enable or disable process tracing (disabled by default)

      CommChan			String/Boolean	Enable the communication channel for notifications from
						the observed process. If the argument is a string it
						is interpreted as the address for the communication channel.
						If no address is specified but the argument is set to true
						autopin+ will use a default address.

      Logfile			String		If this option is set the output of autopin+ will be redirected
						to the file specified in the argument.

      PinningHistory.load	String		Load a pinning history file from the specified path. The type
						of the history is determined by the prefix of the file (e. g. .xml).

      PinningHistory.save	String		Save a pinning history file to the specified path. The type
						of the history is determined by the prefix of the file (e. g. .xml).

    2.2 Performance monitors

      As autopin+ supports the parallel usage of different performance monitors, every monitor must be assigned a
      unique name. This name has to be added to the configuration option PerformanceMonitors:

	PerformanceMonitors = monitor1 monitor2

      After defining the monitor the type can be selected:

	monitor1.type = <type>

      Currently, autopin+ supports three types of performance monitors:

      2.2.1 random

	The random performance monitor is intended for testing. It does not perform any measurements but just
	returns random values. The monitor provides the following configuration options (<name> has to be replaced
	with the name of the monitor):

	Option			Argument	Default		Descripton

	<name>.rand_min		Integer		0		Lower bound for the generated random numbers

	<name>.rand_max		Integer		1		Upper bound for the generated random numbers

	<name>.valtype		String		MAX		Type of the reported values (MAX, MIN or UNKNOWN). This
								information can be used by control strategies to find out
								if bigger or smaller results are "better".

      2.2.2 perfmon

	This monitor is based on the perfmon monitoring interface and thus requires the perfmon kernel patch. As perfmon
	uses ptrace, the process tracing feature of autopin+ is not available when this monitor is used.

	Option			Argument	Description

	<name>.event_type	String		A valid perfmon event type

	The supported events depend on the hardware platform and can be determined with the perfmon utility.

      2.2.3 perf

	The perf monitor is based on the Linux Performance Counter subsystem which is part of newer kernel versions and
	does not require any kernel patches.

	Option			Argument	Description

	<name>.event_type	String		A valid perf event type

	These event types are currently suported:

	PERF_COUNT_HW_CPU_CYCLES, PERF_COUNT_HW_INSTRUCTIONS, PERF_COUNT_HW_CACHE_REFERENCES, PERF_COUNT_HW_CACHE_MISSES,
	PERF_COUNT_HW_BRANCH_INSTRUCTIONS, PERF_COUNT_HW_BRANCH_MISSES, PERF_COUNT_HW_BUS_CYCLES,
	PERF_COUNT_HW_STALLED_CYCLES_FRONTEND, PERF_COUNT_HW_STALLED_CYCLES_BACKEND


    2.3 Control strategy autopin1

      The control strategy which will be used by autopin+ must be specified with the option ControlStrategy:

	ControlStrategy = autopin1

      autopin1 is an extended version of the control strategy of the original autopin. It supports the autopin+ communication
      channel and is able to store results in the pinning history.

      autopin+ introduces a new format for pinnings:

	autopin1.schedule = <cpu_a>:<cpu_b><cpu_c>:<cpu_d>

      The cores are separated by ":". This makes it possible to specify pinnings on systems with more than 10 cores.

      Option				Argument		Default		Description

      autopin1.schedule			List of pinnings	-		The pinnings which will be tested by autopin+

      autopin1.init_time		Integer			15		The init time (like in the original autopin)

      autopin1.warmup_time		Integer			15		The warmup time (like in the original autopin)

      autopin1.measure_time		Integer			30		The measure time (like in the original autopin)

      autopin.openmp_icc		Boolean			FALSE		If this option is true the second thread will not
										be pinned. This is useful if the application uses
										OpenMP and has been compiled with the Intel compiler.

      autopin1.skip			List of integers	-		This option can be used to specifiy threads which
										will not be pinned.

      autopin1.notification_interval	Integer			0		If the communication channel is used the value of
										this option specifies the minimum interval between
										two phase change notifications.
     
    